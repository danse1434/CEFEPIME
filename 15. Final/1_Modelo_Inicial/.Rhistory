##------------------------------------------------------------------------------#
## Nombre del Script: Obtención de gráficos a partir de datos de figuras ---
## generados por Monolix GUI
##
## Propósito del Script: crear y almacenar gráficos generados a partir de
## los datos generados por la suite de Monolix, se debe colocar en la misma
## carpeta en la que se encuentra el proyecto. Este script lee en la carpeta
## ChartsData, que tiene como subdirectorios a cada gráfico generado por la
## suite de Monolix
##
## Autor: Daniel S. Parra González
## Fecha de creación: 04-feb-2020
## Fecha de modificación: 29-may-2020
##
## Copyright (c) Daniel S. Parra, 2020
##
## Email: dsparrag@unal.edu.co
##------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------#
# Introducción-----------------------------------------------------
#-------------------------------------------------------------------------------#
# Carga de paquetes
require(scales)
require(ggrepel)
require(rlang)
require(patchwork)
require(tidyverse)
# Apertura de fuente
source("src/2_funciones.R", encoding = 'UTF-8')
source(file.path('src', '10_performance_fun.R'), encoding = 'UTF-8')
#-------------------------------------------------------------------------------#
# Bondad de ajuste -------------------------------------------------
#-------------------------------------------------------------------------------#
# Ajuste de una variable para guardar la subcarpeta que contiene datos de
# gráfico de bondad de ajuste
auxdir <- file.path('MODELO_FINAL', 'BASE_MODEL')
gof_dir <- file.path(auxdir, 'ChartsData','ObservationsVsPredictions')
# Selección de tema
theme_set(theme_classic() +
theme(panel.border = element_rect(fill = NA, colour = 'black')))
# Apertura de archivo de datos
y_1_obsVsPred <- # Observaciones vs predicciones
read_csv(file.path(gof_dir, 'y_1_obsVsPred.txt'))
y_1_visualGuides <- # Ayudas visuales
read_csv(file.path(gof_dir, 'y_1_visualGuides.txt'))
y_1_obsVsSimulatedPred <- # Observaciones vs predicciones simuladas
read_csv(file.path(gof_dir, 'y_1_obsVsSimulatedPred.txt'))
#-------------------------------------------------------------------------------#
# Bondad de ajuste OBS vs PRED
G_PRED_OBS_PRED <-  y_1_obsVsPred %>%
ggplot(mapping = aes(x = popPred, y = y_1, group = ID)) +
geom_point(shape = 1) +
xlab('PRED') + ylab('OBS') +
geom_abline(slope = 1, intercept = 0, lty = 'dotted') +
# Modelo LOESS
geom_line(y_1_visualGuides,
mapping =  aes(x = popPred_spline_abscissa, y = popPred_spline),
inherit.aes = F, colour = 'blue4') +
geom_ribbon(y_1_visualGuides,
mapping =  aes(x = popPred_ci_abscissa,
ymin = popPred_piLower,
ymax = popPred_piUpper),
inherit.aes = F, fill = 'blue1', alpha = 0.1) +
coord_cartesian(xlim = c(0,90), ylim = c(0,90))
#-------------------------------------------------------------------------------#
# Gráficos de bondad de ajuste
G_PRED_OBS_PRED <-
GOF_PRED(x = popPred, y = y_1,
xspline = popPred_spline_abscissa,
yspline = popPred_spline,
xconfint = popPred_ci_abscissa,
yconfint_lo = popPred_piLower,
yconfint_up = popPred_piUpper,
colourp = 'blue1', xlab = 'PRED', ylab = 'OBS')
G_PRED_OBS_IPRED <-
GOF_PRED(x = indivPredMean, y = y_1,
xspline = indivPred_spline_abscissa,
yspline = indivPred_spline,
xconfint = indivPred_ci_abscissa,
yconfint_lo = indivPred_piLower,
yconfint_up = indivPred_piUpper,
colourp = 'red1', xlab = 'IPRED', ylab = 'OBS')
#-------------------------------------------------------------------------------#
# Bondad de ajuste OBS vs PPRED
G_PRED_OBS_PPRED <-
y_1_obsVsSimulatedPred    %>%
ggplot(mapping = aes(x = indivPredSimulated, y = y_1)) +
geom_point(shape = 1) +
xlab('PPRED') + ylab('OBS') +
stat_smooth(method = 'loess') +
geom_abline(slope = 1, intercept = 0, lty = 'dotted') +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90))
#-------------------------------------------------------------------------------#
# Transformación en logaritmos
breaks     <- 10^(0:2)
min_breaks <- rep(1:9, 3)*(10^rep(0:2, each=9))
G_PRED_OBS_IPREDLOG <-
G_PRED_OBS_IPRED +
scale_y_continuous(trans = 'pseudo_log',
breaks = breaks, minor_breaks = min_breaks) +
scale_x_continuous(trans = 'pseudo_log',
breaks = breaks, minor_breaks = min_breaks)
G_PRED_OBS_PREDLOG <-
G_PRED_OBS_PRED +
scale_y_continuous(trans = 'pseudo_log',
breaks = breaks, minor_breaks = min_breaks) +
scale_x_continuous(trans = 'pseudo_log',
breaks = breaks, minor_breaks = min_breaks)
# Almacenamiento en pdf de los gráficos
G1 <- ((G_PRED_OBS_PRED + G_PRED_OBS_IPRED) /
(G_PRED_OBS_PREDLOG + G_PRED_OBS_IPREDLOG)) &
theme(panel.grid.major = element_line(colour = "gray80"),
panel.grid.minor = element_line(colour = "gray95"))
G1 <- G1 + plot_annotation(tag_levels = 'A')
ggsave('figures/G_GOF.pdf', G1,
device = 'pdf', width = 8, height = 6, units = 'in')
#-------------------------------------------------------------------------------#
# Residuales -------------------------------------------------------------------
#-------------------------------------------------------------------------------#
# Ajuste de una variable para guardar la subcarpeta que contiene datos de
# gráfico de residuales
res_dir <- file.path(auxdir, 'ChartsData','ScatterPlotOfTheResiduals')
# Todos los Residuales
y_1_residuals <-
read_csv(file.path(res_dir, 'y_1_residuals.txt'))
# Residuales simulados
y_1_simulatedResiduals <-
read_csv(file.path(res_dir, 'y_1_simulatedResiduals.txt'))
# Percentiles de residuales vs predicción
y_1_prediction_percentiles_iwRes <-
read_csv(file.path(res_dir, 'y_1_prediction_percentiles_iwRes.txt'))
y_1_prediction_percentiles_pwRes <-
read_csv(file.path(res_dir, 'y_1_prediction_percentiles_pwRes.txt'))
y_1_prediction_percentiles_npde <-
read_csv(file.path(res_dir, 'y_1_prediction_percentiles_npde.txt'))
# Percentiles de residuales vs tiempo
y_1_time_percentiles_iwRes <-
read_csv(file.path(res_dir, 'y_1_time_percentiles_iwRes.txt'))
y_1_time_percentiles_pwRes <-
read_csv(file.path(res_dir, 'y_1_time_percentiles_pwRes.txt'))
y_1_time_percentiles_npde <-
read_csv(file.path(res_dir, 'y_1_time_percentiles_npde.txt'))
# Especificación de contenedores (bins) en los datos
y_1_individualBins <-
read_csv(file.path(res_dir, 'y_1_individualBins.txt'))
y_1_populationBins <-
read_csv(file.path(res_dir, 'y_1_populationBins.txt'))
y_1_timeBins <-
read_csv(file.path(res_dir, 'y_1_timeBins.txt'))
# Especificación de línea de tendencia
y_1_spline <-
read_csv(file.path(res_dir, 'y_1_spline.txt'))
#-------------------------------------------------------------------------------#
# Gráficos de residuales vs Tiempo ---------------------------------------------
#-------------------------------------------------------------------------------#
G_RES_T_PWRES <- RES_TSFD(
x = time,
y = pwRes,
xspline = time_pwRes,
yspline = time_pwRes_spline,
perc_data = y_1_time_percentiles_pwRes,
xlab = 'TSFD',
ylab = 'PWRES'
)
function (x)
##------------------------------------------------------------------------------#
## Nombre del Script: Obtención de gráficos a partir de datos de figuras ---
## generados por Monolix GUI
##
## Propósito del Script: crear y almacenar gráficos generados a partir de
## los datos generados por la suite de Monolix, se debe colocar en la misma
## carpeta en la que se encuentra el proyecto. Este script lee en la carpeta
## ChartsData, que tiene como subdirectorios a cada gráfico generado por la
## suite de Monolix
##
## Autor: Daniel S. Parra González
## Fecha de creación: 04-feb-2020
## Fecha de modificación: 29-may-2020
##
## Copyright (c) Daniel S. Parra, 2020
##
## Email: dsparrag@unal.edu.co
##------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------#
# Introducción-----------------------------------------------------
#-------------------------------------------------------------------------------#
# Carga de paquetes
require(scales)
require(ggrepel)
require(rlang)
require(patchwork)
require(tidyverse)
# Apertura de fuente
source("src/2_funciones.R", encoding = 'UTF-8')
source(file.path('src', '10_performance_fun.R'), encoding = 'UTF-8')
#-------------------------------------------------------------------------------#
# Bondad de ajuste -------------------------------------------------
#-------------------------------------------------------------------------------#
# Ajuste de una variable para guardar la subcarpeta que contiene datos de
# gráfico de bondad de ajuste
auxdir <- file.path('MODELO_FINAL', 'BASE_MODEL')
gof_dir <- file.path(auxdir, 'ChartsData','ObservationsVsPredictions')
# Selección de tema
theme_set(theme_classic() +
theme(panel.border = element_rect(fill = NA, colour = 'black')))
# Apertura de archivo de datos
y_1_obsVsPred <- # Observaciones vs predicciones
read_csv(file.path(gof_dir, 'y_1_obsVsPred.txt'))
y_1_visualGuides <- # Ayudas visuales
read_csv(file.path(gof_dir, 'y_1_visualGuides.txt'))
y_1_obsVsSimulatedPred <- # Observaciones vs predicciones simuladas
read_csv(file.path(gof_dir, 'y_1_obsVsSimulatedPred.txt'))
#-------------------------------------------------------------------------------#
# Bondad de ajuste OBS vs PRED
G_PRED_OBS_PRED <-  y_1_obsVsPred %>%
ggplot(mapping = aes(x = popPred, y = y_1, group = ID)) +
geom_point(shape = 1) +
xlab('PRED') + ylab('OBS') +
geom_abline(slope = 1, intercept = 0, lty = 'dotted') +
# Modelo LOESS
geom_line(y_1_visualGuides,
mapping =  aes(x = popPred_spline_abscissa, y = popPred_spline),
inherit.aes = F, colour = 'blue4') +
geom_ribbon(y_1_visualGuides,
mapping =  aes(x = popPred_ci_abscissa,
ymin = popPred_piLower,
ymax = popPred_piUpper),
inherit.aes = F, fill = 'blue1', alpha = 0.1) +
coord_cartesian(xlim = c(0,90), ylim = c(0,90))
#-------------------------------------------------------------------------------#
# Gráficos de bondad de ajuste
G_PRED_OBS_PRED <-
GOF_PRED(x = popPred, y = y_1,
xspline = popPred_spline_abscissa,
yspline = popPred_spline,
xconfint = popPred_ci_abscissa,
yconfint_lo = popPred_piLower,
yconfint_up = popPred_piUpper,
colourp = 'blue1', xlab = 'PRED', ylab = 'OBS')
G_PRED_OBS_IPRED <-
GOF_PRED(x = indivPredMean, y = y_1,
xspline = indivPred_spline_abscissa,
yspline = indivPred_spline,
xconfint = indivPred_ci_abscissa,
yconfint_lo = indivPred_piLower,
yconfint_up = indivPred_piUpper,
colourp = 'red1', xlab = 'IPRED', ylab = 'OBS')
#-------------------------------------------------------------------------------#
# Bondad de ajuste OBS vs PPRED
G_PRED_OBS_PPRED <-
y_1_obsVsSimulatedPred    %>%
ggplot(mapping = aes(x = indivPredSimulated, y = y_1)) +
geom_point(shape = 1) +
xlab('PPRED') + ylab('OBS') +
stat_smooth(method = 'loess') +
geom_abline(slope = 1, intercept = 0, lty = 'dotted') +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90))
#-------------------------------------------------------------------------------#
# Transformación en logaritmos
breaks     <- 10^(0:2)
min_breaks <- rep(1:9, 3)*(10^rep(0:2, each=9))
G_PRED_OBS_IPREDLOG <-
G_PRED_OBS_IPRED +
scale_y_continuous(trans = 'pseudo_log',
breaks = breaks, minor_breaks = min_breaks) +
scale_x_continuous(trans = 'pseudo_log',
breaks = breaks, minor_breaks = min_breaks)
G_PRED_OBS_PREDLOG <-
G_PRED_OBS_PRED +
scale_y_continuous(trans = 'pseudo_log',
breaks = breaks, minor_breaks = min_breaks) +
scale_x_continuous(trans = 'pseudo_log',
breaks = breaks, minor_breaks = min_breaks)
# Almacenamiento en pdf de los gráficos
G1 <- ((G_PRED_OBS_PRED + G_PRED_OBS_IPRED) /
(G_PRED_OBS_PREDLOG + G_PRED_OBS_IPREDLOG)) &
theme(panel.grid.major = element_line(colour = "gray80"),
panel.grid.minor = element_line(colour = "gray95"))
G1 <- G1 + plot_annotation(tag_levels = 'A')
ggsave('figures/G_GOF.pdf', G1,
device = 'pdf', width = 8, height = 6, units = 'in')
#-------------------------------------------------------------------------------#
# Residuales -------------------------------------------------------------------
#-------------------------------------------------------------------------------#
# Ajuste de una variable para guardar la subcarpeta que contiene datos de
# gráfico de residuales
res_dir <- file.path(auxdir, 'ChartsData','ScatterPlotOfTheResiduals')
# Todos los Residuales
y_1_residuals <-
read_csv(file.path(res_dir, 'y_1_residuals.txt'))
# Residuales simulados
y_1_simulatedResiduals <-
read_csv(file.path(res_dir, 'y_1_simulatedResiduals.txt'))
# Percentiles de residuales vs predicción
y_1_prediction_percentiles_iwRes <-
read_csv(file.path(res_dir, 'y_1_prediction_percentiles_iwRes.txt'))
y_1_prediction_percentiles_pwRes <-
read_csv(file.path(res_dir, 'y_1_prediction_percentiles_pwRes.txt'))
y_1_prediction_percentiles_npde <-
read_csv(file.path(res_dir, 'y_1_prediction_percentiles_npde.txt'))
# Percentiles de residuales vs tiempo
y_1_time_percentiles_iwRes <-
read_csv(file.path(res_dir, 'y_1_time_percentiles_iwRes.txt'))
y_1_time_percentiles_pwRes <-
read_csv(file.path(res_dir, 'y_1_time_percentiles_pwRes.txt'))
y_1_time_percentiles_npde <-
read_csv(file.path(res_dir, 'y_1_time_percentiles_npde.txt'))
# Especificación de contenedores (bins) en los datos
y_1_individualBins <-
read_csv(file.path(res_dir, 'y_1_individualBins.txt'))
y_1_populationBins <-
read_csv(file.path(res_dir, 'y_1_populationBins.txt'))
y_1_timeBins <-
read_csv(file.path(res_dir, 'y_1_timeBins.txt'))
# Especificación de línea de tendencia
# y_1_spline <-
#   read_csv(file.path(res_dir, 'y_1_spline.txt'))
res_dir
#-------------------------------------------------------------------------------#
# Bondad de ajuste -------------------------------------------------
#-------------------------------------------------------------------------------#
# Ajuste de una variable para guardar la subcarpeta que contiene datos de
# gráfico de bondad de ajuste
auxdir <- file.path('BASE_MODEL')
gof_dir <- file.path(auxdir, 'ChartsData','ObservationsVsPredictions')
# Selección de tema
theme_set(theme_classic() +
theme(panel.border = element_rect(fill = NA, colour = 'black')))
# Apertura de archivo de datos
y_1_obsVsPred <- # Observaciones vs predicciones
read_csv(file.path(gof_dir, 'y_1_obsVsPred.txt'))
