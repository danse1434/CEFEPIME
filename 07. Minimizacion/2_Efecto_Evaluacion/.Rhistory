##========================================================================#
## Nombre del Script: Análisis de influencia de valores iniciales con un
##  diseño factorial completo ----------------------------------------------
##
## Proposito del Script: analizar la influencia de los valores iniciales de
##  efectos fijos del modelo, en la verosimilitud o los parámetros que se
##  alcanzan. Los valores iniciales de efectos aleatorios fueron 1.0 para
##  todos excepto, b que contaba con 0.3 de manera inicial. Las configuraciones
##  del algoritmo SAEM: fase exploratoria 500/1000, fase alisamiento
##  500/1000, anillamiento simulado 500 - condiciones similares a bootstrap.
##
## Autor: Daniel S. Parra Gonzalez
## Fecha de creacion: 05-03-2020
##
## Copyright (c) Daniel S. Parra, 2020
##
## Email: dsparrag@unal.edu.co
##========================================================================#
# Carga de paquetes
require(rlang)
require(tidyverse)
# Definición de directorio principal
setwd(file.path('F:', 'Documentos', '(Proyecto)_Estudio_PKPD', 'CEFEPIME',
'07. Minimizacion', '2_Efecto_Evaluacion'))
##########################################################################-
# Especificación de variación en condiciones iniciales --------------------
##########################################################################-
# Apertura de archivo de datos de parámetros de modelo base
populationParameters <-
read_csv(
"../../04. Residual/Modelo_8/RES_M1/populationParameters.txt"
)
##########################################################################-
# Cálculo de valor mínimo (50%) y valor máximo (150%) respecto al valor
# nominal estimado en el modelo base.
pop_par <- populationParameters %>%
mutate(minvalue = 0.5 * value,
maxvalue = 1.5 * value)
pop_par
##########################################################################-
# Creación de matriz con parámetros (efectos fijos) y sus perturbaciones.
A <- pop_par %>%
filter(parameter %in% c('Cl_pop', 'V1_pop', 'Q_pop', 'V2_pop')) %>%
select(parameter, value, minvalue, maxvalue) %>%
t(.)
# Seleccionar encabezados a partir de primera fila, eliminar la primera
# fila, y convertir la matriz resultante en numérica.
h <- A[1,]
A <- A[-1,]
A <- apply(A, 2, as.numeric)
# Asignación de nombres de columna a matriz
colnames(A) <- h
A # Visualizar la matriz creada
##########################################################################-
# Crear una expansión a modo de diseño factorial completo, se toman como
# factores a cada una de las columnas.
B <- expand.grid(
Factor1 = A[, 1],
Factor2 = A[, 2],
Factor3 = A[, 3],
Factor4 = A[, 4]
)
# Asignación de nombres de columna a matriz expandida
colnames(B) <- h
B # Visualizar la matriz creada
##########################################################################-
# Análisis de iteraciones -------------------------------------------------
##########################################################################-
# Creación de una lista vacía
LL_ls <- vector(mode = 'list', length = dim(B)[1])
# Colocar en cada item un data table abriendo cada carpeta de manera iterativa
for (i in 1:dim(B)[1]) {
LL_ls[[i]] <-
read_csv(
file.path('assessment_2', paste0('A', i), 'MODELO_BASE_efecto',
'LogLikelihood', 'logLikelihood.txt'), col_types = cols())
}
# Cambio en la matriz con el diseño factorial para incluir el identificador
# de iteración.
B <- B %>%
rownames_to_column(var = 'Iteration')
LL_df <- LL_ls %>%
map_dfr( ~ as.data.frame(.x), .id = 'Iteration') %>%
as_tibble(.) %>%
inner_join(B, by = "Iteration") %>%
rename(IS = importanceSampling)
##########################################################################-
# Aplicar un ANOVA con iteraciones en el criterio -2LL, las variables
# dependientes son cuantitativas.
LL_df %>%
filter(., criteria == "-2LL") %>%
aov(IS ~ Cl_pop * V1_pop * Q_pop * V2_pop, data = .) %>%
summary()
LL_df %>%
filter(., criteria == "-2LL") %>%
aov(IS ~ Cl_pop + V1_pop + Q_pop + V2_pop, data = .) %>%
summary()
fcrec <- function(x) {
fcrc <- function(P, X) {
paste(A[X, P])
}
list(L = fcrc(x, 2),
M = fcrc(x, 1),
S = fcrc(x, 3)) %>% return(.)
}
LL_df <- LL_df %>%
mutate(Cl_pop = factor(Cl_pop),
V1_pop = factor(V1_pop),
Q_pop = factor(Q_pop),
V2_pop = factor(V2_pop)) %>%
mutate(Cl = fct_recode(Cl_pop, !!!fcrec(1)),
V1 = fct_recode(V1_pop, !!!fcrec(2)),
Q = fct_recode(Q_pop, !!!fcrec(3)),
V2 = fct_recode(V2_pop, !!!fcrec(4)) )
##########################################################################-
# Visualizar la matríz creada
LL_df
##########################################################################-
# Aplicar un ANOVA sin iteraciones en el criterio -2LL, no hay diferencias
# al utilizar otros criterios. Las variables independientes son cualitativas.
LL_df %>%
filter(., criteria == "-2LL") %>%
aov(IS ~ Cl + V1 + Q + V2, data = .) %>%
summary(.)
##########################################################################-
# Lista de parámetros -----------------------------------------------------
##########################################################################-
Param_ls <- vector(mode = 'list', length = dim(B)[1])
for (i in 1:dim(B)[1]) {
Param_ls[[i]] <-
read_csv(
file.path('assessment_2', paste0('A', i), 'MODELO_BASE_efecto',
'populationParameters.txt'), col_types = cols())
}
Param_df <- Param_ls %>%
map_dfr( ~ as.data.frame(.x), .id = 'Iteration') %>%
as_tibble(.) %>%
inner_join(B, by = "Iteration") %>%
mutate(parameter = factor(parameter,
levels = c('Cl_pop', 'V1_pop', 'Q_pop', 'V2_pop',
'omega_Cl', 'omega_V1', 'omega_Q', 'omega_V2',
'a', 'b')))
##########################################################################-
# Creación de gráfico con iteraciones
# Selección de tema
theme_set(theme_classic() +
theme(panel.border = element_rect(fill = NA, colour = 'black')))
##########################################################################-
# Resumen de medianas para cada parámetro en específico.
# Agrupar por parámetro; resumir por mediana de valor en todas las iteraciones
Param_DF <- Param_df %>%
group_by(parameter) %>%
summarise(mn = mean(value))
# Crear gráfico de comparación de parámetros en las corridas, los parámetros
# tienen barras de error correspondientes a SE.
G1 <- Param_df %>%
mutate(Iteration = as.double(Iteration)) %>%
ggplot(aes(x = Iteration, col = factor(Iteration))) +
geom_hline(data = Param_DF, mapping = aes(yintercept = mn), col = 'gray') +
geom_point(aes(y = value), shape = 20) +
geom_errorbar(aes(ymin = value - se_sa, ymax = value + se_sa)) +
facet_wrap( ~ parameter, ncol =  4, scales = "free") +
theme(legend.position = "none") +
xlab('Corrida') + ylab('Valor')
G1
Param_df
# Crear gráfico de comparación de parámetros en las corridas, los parámetros
# tienen barras de error correspondientes a SE.
G1 <- Param_df %>%
mutate(Iteration = as.double(Iteration)) %>%
ggplot(aes(x = Iteration, col = factor(Iteration))) +
geom_hline(data = Param_DF, mapping = aes(yintercept = mn), col = 'gray') +
geom_point(aes(y = value), shape = 20, colour = "#1c86ee") +
geom_errorbar(aes(ymin = value - se_sa, ymax = value + se_sa), colour = "#1c86ee") +
facet_wrap( ~ parameter, ncol =  4, scales = "free") +
theme(legend.position = "none") +
xlab('Corrida') + ylab('Valor')
G1
# Almacenamiento de gráfico
ggsave(G1, filename = 'G1.pdf', device = 'pdf', width = 8, height = 6)
##########################################################################-
# Lista de datos de convergencia ------------------------------------------
##########################################################################-
# Creación de lista vacía pre-alocada
Conver_ls <- vector(mode = 'list', length = dim(B)[1])
# Apertura de tablas en cada uno de los directorios de manera iterativa
for (i in 1:dim(B)[1]) {
Conver_ls[[i]] <-
read_csv(
file.path('assessment_2', paste0('A', i), 'MODELO_BASE_efecto',
'ChartsData', 'Saem', 'CvParam.txt'), col_types = cols())
}
# Superposición de parámetros estimados de modelo base, se cambian nombres
# y variables para ajustarse al acople.
pop_par = pop_par %>%
rename(Parameter = parameter) %>%
mutate(Parameter = factor(Parameter, levels = levels(Conver_df$Parameter)))
Conver_df <- Conver_ls %>%
map_dfr( ~ as.data.frame(.x), .id = 'Run') %>%
as_tibble(.) %>%
inner_join(B, by = c("Run" = "Iteration")) %>%
gather(matches("\\_pop\\.x|omega\\_|a$|b$|conv"), key = "Parameter", value = "Value") %>%
mutate(Parameter = str_replace(Parameter, "\\_pop\\.x", "_pop")) %>%
mutate(Parameter = factor(Parameter,
levels = c('Cl_pop', 'V1_pop', 'Q_pop', 'V2_pop',
'omega_Cl', 'omega_V1', 'omega_Q', 'omega_V2',
'a', 'b', 'convergenceIndicator')))
G2 <- Conver_df %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5) +
facet_wrap( ~ Parameter, ncol = 4, scales = "free") +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dotted') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dotted', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dotted', size = 0.5) +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
Conver_df
Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0)
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5) +
facet_wrap( ~ Parameter, ncol = 4, scales = "free") +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dotted') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dotted', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dotted', size = 0.5) +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
Conver_df
pop_par
Conver_df
pop_par
Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = Parameter)
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = Parameter) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5) +
facet_wrap( ~ Parameter, ncol = 4, scales = "free") +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dotted') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dotted', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dotted', size = 0.5) +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = Parameter) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dotted') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dotted', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dotted', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
Conver_df$Parameter
levels(Conver_df$Parameter)
Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = Parameter)
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = Parameter) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = fct_rev(Parameter)) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = fct_rev(Parameter)) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = fct_rev(Parameter)) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5, col = '#1c86ee') +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
# Superposición de parámetros estimados de modelo base, se cambian nombres
# y variables para ajustarse al acople.
pop_par = pop_par %>%
rename(Parameter = parameter) %>%
mutate(Parameter = factor(Parameter, levels = levels(Conver_df$Parameter)))
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = Parameter) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5, col = '#1c86ee') +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
ggsave(G2, filename = 'G2.pdf', device = 'pdf', width = 8, height = 6)
# Superposición de parámetros estimados de modelo base, se cambian nombres
# y variables para ajustarse al acople.
pop_par = pop_par %>%
rename(Parameter = parameter) %>%
mutate(Parameter = factor(Parameter, levels = levels(Conver_df$Parameter)))
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = Parameter) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5, col = '#1c86ee') +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
##########################################################################-
# Cálculo de valor mínimo (50%) y valor máximo (150%) respecto al valor
# nominal estimado en el modelo base.
pop_par <- populationParameters %>%
mutate(minvalue = 0.5 * value,
maxvalue = 1.5 * value)
# Superposición de parámetros estimados de modelo base, se cambian nombres
# y variables para ajustarse al acople.
pop_par = pop_par %>%
rename(Parameter = parameter) %>%
mutate(Parameter = factor(Parameter, levels = levels(Conver_df$Parameter)))
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
mutate(parameter = Parameter) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5, col = '#1c86ee') +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
pop_par
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
# mutate(parameter = Parameter) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5, col = '#1c86ee') +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
G2 <- Conver_df %>%
filter((iteration + 10 + 1) %% 10 == 0) %>%
# mutate(parameter = Parameter) %>%
ggplot(aes(x = iteration, y = Value, group = Run, col = Run)) +
geom_line(alpha = 0.5, col = '#1c86ee') +
geom_hline(data = pop_par, mapping = aes(yintercept = value), lty = 'dashed') +
geom_hline(data = pop_par, mapping = aes(yintercept = value - se_sa),
lty = 'dashed', size = 0.5) +
geom_hline(data = pop_par, mapping = aes(yintercept = value + se_sa),
lty = 'dashed', size = 0.5) +
facet_wrap( ~ Parameter, ncol = 4, scales = "free") +
theme(legend.position = "none") +
xlab('Iteración')  + ylab('Valor')
G2
ggsave(G2, filename = 'G2.pdf', device = 'pdf', width = 8, height = 6)
ggsave(G2, filename = 'G2.png', device = 'png', width = 8, height = 6, dpi = 300)
G2
# Crear gráfico de comparación de parámetros en las corridas, los parámetros
# tienen barras de error correspondientes a SE.
G1 <- Param_df %>%
mutate(Iteration = as.double(Iteration)) %>%
ggplot(aes(x = Iteration, col = factor(Iteration))) +
geom_hline(data = Param_DF, mapping = aes(yintercept = mn), col = 'gray') +
geom_point(aes(y = value), shape = 20, colour = "#1c86ee") +
geom_errorbar(aes(ymin = value - se_sa, ymax = value + se_sa), colour = "#1c86ee") +
facet_wrap( ~ parameter, ncol =  4, scales = "free") +
theme(legend.position = "none") +
xlab('Corrida') + ylab('Valor')
G1
# Crear gráfico de comparación de parámetros en las corridas, los parámetros
# tienen barras de error correspondientes a SE.
G1 <- Param_df %>%
mutate(Iteration = as.double(Iteration)) %>%
ggplot(aes(x = Iteration, col = factor(Iteration))) +
geom_hline(data = Param_DF, mapping = aes(yintercept = mn), col = 'gray') +
geom_point(aes(y = value), shape = 20, colour = alpha("#1c86ee", 0.2)) +
geom_errorbar(aes(ymin = value - se_sa, ymax = value + se_sa), colour = alpha("#1c86ee", 0.2)) +
facet_wrap( ~ parameter, ncol =  4, scales = "free") +
theme(legend.position = "none") +
xlab('Corrida') + ylab('Valor')
G1
# Crear gráfico de comparación de parámetros en las corridas, los parámetros
# tienen barras de error correspondientes a SE.
G1 <- Param_df %>%
mutate(Iteration = as.double(Iteration)) %>%
ggplot(aes(x = Iteration, col = factor(Iteration))) +
geom_hline(data = Param_DF, mapping = aes(yintercept = mn), col = 'gray') +
geom_point(aes(y = value), shape = 20, colour = alpha("#1c86ee", 0.5)) +
geom_errorbar(aes(ymin = value - se_sa, ymax = value + se_sa), colour = alpha("#1c86ee", 0.5)) +
facet_wrap( ~ parameter, ncol =  4, scales = "free") +
theme(legend.position = "none") +
xlab('Corrida') + ylab('Valor')
G1
